# Copyright (c) 2014-2015 Arduino LLC.  All right reserved.
# Copyright (c) 2016 Sandeep Mistry All right reserved.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

name=Nordic Semiconductor nRF5 Boards
version=0.2.0

# Compile variables
# -----------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.gcc-arm-none-eabi-5_2-2015q4.path}/bin/
compiler.c.cmd=arm-none-eabi-gcc
compiler.c.flags=-mcpu={build.mcu} -mthumb -c -g3 -O3 {compiler.warning_flags} {build.float_flags} -ffunction-sections -fdata-sections -fno-strict-aliasing -fno-builtin --short-enums
compiler.c.elf.cmd=arm-none-eabi-gcc
compiler.c.elf.flags=-O3 -Wl,--gc-sections

compiler.S.cmd=arm-none-eabi-gcc
compiler.S.flags=-c -g -x assembler-with-cpp

compiler.cpp.cmd=arm-none-eabi-g++
compiler.cpp.flags=-mcpu={build.mcu} -mthumb -c -g -Os {compiler.warning_flags} {build.float_flags} -std=gnu++11 -ffunction-sections -fdata-sections -fno-strict-aliasing -fno-threadsafe-statics -nostdlib -fno-rtti -fno-exceptions

compiler.ar.cmd=arm-none-eabi-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=arm-none-eabi-objcopy
compiler.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0

compiler.elf2bin.flags=-O binary
compiler.elf2bin.cmd=arm-none-eabi-objcopy
compiler.elf2hex.flags=-O ihex
compiler.elf2hex.cmd=arm-none-eabi-objcopy

compiler.ldflags=-mcpu={build.mcu} -mthumb {build.float_flags} -Wl,--gc-sections -lc -lnosys
compiler.size.cmd=arm-none-eabi-size



# NRF52840 Related Variables
# --------------------------

# Toolchain libraries and headers
nrf.sdk.path={build.core.path}/SDK
compiler.nrf.flags="-I{nrf.sdk.path}/components/" "-I{nrf.sdk.path}/components/toolchain/" "-I{nrf.components.path}/toolchain/gcc/" "-I{nrf.sdk.path}/components/toolchain/CMSIS/Include" 

# NRF sdk_config.h
nrf.components.path={nrf.sdk.path}/components
compiler.components.flags="-I{nrf.components.path}/"

# NRF device
nrf.cdevice.path={nrf.components.path}/device
compiler.cdevice.flags="-I{nrf.cdevice.path}/"

# NRF component libraries
nrf.clibraries.path={nrf.components.path}/libraries
compiler.clibraries.flags="-I{nrf.clibraries.path}/timer/" "-I{nrf.clibraries.path}/log/" "-I{nrf.clibraries.path}/scheduler/" "-I{nrf.clibraries.path}/strerror/" "-I{nrf.clibraries.path}/bsp/experimental/" "-I{nrf.clibraries.path}/log/src/" "-I{nrf.clibraries.path}/bsp/" "-I{nrf.clibraries.path}/button/" "-I{nrf.clibraries.path}/util/" 

# NRF component drivers
nrf.cdrivers.path={nrf.components.path}/drivers_nrf
compiler.cdrivers.flags="-I{nrf.cdrivers.path}/common/" "-I{nrf.cdrivers.path}/clock/" "-I{nrf.cdrivers.path}/hal/" "-I{nrf.cdrivers.path}/nrf_soc_nosd/" "-I{nrf.cdrivers.path}/delay/" "-I{nrf.cdrivers.path}/gpiote/"

# NRF boards
nrf.cboards.path={nrf.components.path}/boards
compiler.cboards.flags="-I{nrf.cboards.path}/"



# OpenThread Related Variables
# ----------------------------
nrf.external.path={nrf.sdk.path}/external

# OpenThread and NRF CC310 headers
nrf.external.path={nrf.sdk.path}/external
compiler.external.flags="-I{nrf.external.path}/nrf_cc310/include/" "-I{nrf.external.path}/segger_rtt/" "-I{nrf.external.path}/openthread/include/"

# OpenThread static libraries
nrf.openthreadlib.path={nrf.external.path}/openthread/lib/gcc
compiler.openthreadlib.flags="-I{nrf.openthreadlib.path}/libopenthread-cli-ftd.a" "-I{nrf.openthreadlib.path}/libopenthread-ftd.a" "-I{nrf.openthreadlib.path}/libopenthread-nrf52840-sdk.a" "-I{nrf.openthreadlib.path}/libopenthread-diag.a" "-I{nrf.openthreadlib.path}/libmbedcrypto.a"

# NRF CC310 static library
nrf_cc310.path={nrf.external.path}/nrf_cc310/lib
compiler.nrf_cc310.flags="-I{nrf_cc310.path}/libcc310_gcc_0.9.0.a"



# These can be overridden in platform.local.txt
# ---------------------------------------------
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.cpp.extra_flags=
compiler.S.extra_flags=
compiler.ar.extra_flags=
compiler.elf2bin.extra_flags=
compiler.elf2hex.extra_flags=


# Compile patterns
# ----------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {compiler.nrf.flags} {compiler.components.flags} {compiler.cdevice.flags} {compiler.clibraries.flags} {compiler.cboards.flags} {compiler.cdrivers.flags} {compiler.external.flags} {compiler.openthreadlib.flags} {compiler.nrf_cc310.flags} {includes} "{source_file}" {compiler.openthreadlib.flags} {compiler.nrf_cc310.flags} -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {compiler.nrf.flags} {compiler.components.flags} {compiler.cdevice.flags} {compiler.clibraries.flags} {compiler.cboards.flags} {compiler.cdrivers.flags} {compiler.external.flags} {compiler.openthreadlib.flags} {compiler.nrf_cc310.flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} "-L{nrf.sdk.path}/components/toolchain/gcc/" "-L{nrf.sdk.path}/external/openthread/linker_scripts/" "-T{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nano.specs --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--start-group -lm "{build.path}/{archive_file}" -Wl,--end-group

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2bin.cmd}" {compiler.elf2bin.flags} {compiler.elf2bin.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save bin
recipe.output.tmp_file_bin={build.project_name}.bin
recipe.output.save_file_bin={build.project_name}.save.bin

## Save hex
recipe.output.tmp_file_hex={build.project_name}.hex
recipe.output.save_file_hex={build.project_name}.save.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

## Export Compiled Binary
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex
